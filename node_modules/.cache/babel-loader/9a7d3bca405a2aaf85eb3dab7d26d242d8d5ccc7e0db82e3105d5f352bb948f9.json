{"ast":null,"code":"var _jsxFileName = \"/home/smart/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/my_Project/test_task/my-app/src/components/Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Функция для создания нового пустого поля\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = () => {\n  const numRows = 25;\n  const numCols = 25;\n  return Array.from({\n    length: numRows\n  }, () => Array(numCols).fill(false));\n};\n\n// Функция для подсчета живых соседей\nconst countNeighbors = (grid, row, col) => {\n  const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n  const arr = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]];\n  const row2 = 1;\n  const col2 = 3;\n  console.log(arr[row2][col2], '<<<');\n  let neighbors = 0;\n  directions.forEach(([dx, dy]) => {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length) {\n      neighbors += grid[newRow][newCol] ? 1 : 0;\n    }\n  });\n  return neighbors;\n};\n\n// Функция для вычисления следующего состояния доски\nconst nextGeneration = grid => {\n  const newGrid = grid.map((row, rowIndex) => row.map((cell, colIndex) => {\n    const neighbors = countNeighbors(grid, rowIndex, colIndex);\n    if (cell && (neighbors === 2 || neighbors === 3)) {\n      return true;\n    }\n    if (!cell && neighbors === 3) {\n      return true;\n    }\n    return false;\n  }));\n  return newGrid;\n};\nexport const GameOfLife = () => {\n  _s();\n  const [grid, setGrid] = useState(createEmptyGrid);\n  const [running, setRunning] = useState(false);\n\n  // Обновление сетки каждую секунду, если игра запущена\n  useEffect(() => {\n    if (!running) return;\n    const interval = setInterval(() => {\n      setGrid(prevGrid => nextGeneration(prevGrid));\n    }, 4000);\n    return () => clearInterval(interval); // Останавливаем обновление при размонтировании компонента\n  }, [running]);\n\n  // Функция для изменения состояния клетки при клике\n  const toggleCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col];\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game of Life\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${grid[0].length}, 20px)`\n      },\n      children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => toggleCell(rowIndex, colIndex),\n        style: {\n          width: 20,\n          height: 20,\n          backgroundColor: cell ? 'black' : 'white',\n          border: '1px solid gray',\n          cursor: 'pointer'\n        }\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRunning(!running),\n        children: running ? 'Stop' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setGrid(createEmptyGrid()),\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setGrid(createEmptyGrid()),\n        children: \"Randomize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(GameOfLife, \"qg10LiHygJaMO92cQgXvVqKMjIo=\");\n_c = GameOfLife;\nvar _c;\n$RefreshReg$(_c, \"GameOfLife\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","createEmptyGrid","numRows","numCols","Array","from","length","fill","countNeighbors","grid","row","col","directions","arr","row2","col2","console","log","neighbors","forEach","dx","dy","newRow","newCol","nextGeneration","newGrid","map","rowIndex","cell","colIndex","GameOfLife","_s","setGrid","running","setRunning","interval","setInterval","prevGrid","clearInterval","toggleCell","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","onClick","width","height","backgroundColor","border","cursor","marginTop","_c","$RefreshReg$"],"sources":["/home/smart/Рабочий стол/my_Project/test_task/my-app/src/components/Main.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Функция для создания нового пустого поля\nconst createEmptyGrid = () => {\n  const numRows = 25;\n  const numCols = 25;\n  return Array.from({ length: numRows }, () => Array(numCols).fill(false));\n};\n\n// Функция для подсчета живых соседей\nconst countNeighbors = (grid: Array<number[]>, row: number, col: number) => {\n  const directions = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ];\n  const arr = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n  ];\n  const row2 = 1;\n  const col2 = 3;\n  console.log(arr[row2][col2], '<<<');\n  let neighbors = 0;\n  directions.forEach(([dx, dy]) => {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length) {\n      neighbors += grid[newRow][newCol] ? 1 : 0;\n    }\n  });\n\n  return neighbors;\n};\n\n// Функция для вычисления следующего состояния доски\nconst nextGeneration = (grid: Array<number[]>) => {\n  const newGrid = grid.map((row, rowIndex) =>\n    row.map((cell, colIndex) => {\n      const neighbors = countNeighbors(grid, rowIndex, colIndex);\n      if (cell && (neighbors === 2 || neighbors === 3)) {\n        return true;\n      }\n      if (!cell && neighbors === 3) {\n        return true;\n      }\n      return false;\n    }),\n  );\n  return newGrid;\n};\n\nexport const GameOfLife = () => {\n  const [grid, setGrid] = useState(createEmptyGrid);\n  const [running, setRunning] = useState(false);\n\n  // Обновление сетки каждую секунду, если игра запущена\n  useEffect(() => {\n    if (!running) return;\n\n    const interval = setInterval(() => {\n      setGrid((prevGrid) => nextGeneration(prevGrid));\n    }, 4000);\n\n    return () => clearInterval(interval); // Останавливаем обновление при размонтировании компонента\n  }, [running]);\n\n  // Функция для изменения состояния клетки при клике\n  const toggleCell = (row: number, col: number) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col];\n    setGrid(newGrid);\n  };\n\n  return (\n    <div>\n      <h1>Game of Life</h1>\n      <div style={{ display: 'grid', gridTemplateColumns: `repeat(${grid[0].length}, 20px)` }}>\n        {grid.map((row, rowIndex) =>\n          row.map((cell, colIndex) => (\n            <div\n              key={`${rowIndex}-${colIndex}`}\n              onClick={() => toggleCell(rowIndex, colIndex)}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: cell ? 'black' : 'white',\n                border: '1px solid gray',\n                cursor: 'pointer',\n              }}\n            />\n          )),\n        )}\n      </div>\n      <div style={{ marginTop: 20 }}>\n        <button onClick={() => setRunning(!running)}>{running ? 'Stop' : 'Start'}</button>\n        <button onClick={() => setGrid(createEmptyGrid())}>Clear</button>\n        <button onClick={() => setGrid(createEmptyGrid())}>Randomize</button>\n      </div>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}