{"ast":null,"code":"var _jsxFileName = \"/home/smart/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/my_Project/test_task/my-app/src/components/Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrGenerator = () => {\n  const numRows = 25;\n  const numCols = 25;\n  return Array.from({\n    length: numRows\n  }, () => Array(numCols).fill(false));\n};\nconst searchNeighbors = ({\n  arr,\n  rowIndex,\n  colIndex\n}) => {\n  let count = 0;\n  const indNeighbors = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n  indNeighbors.forEach(([row, col]) => {\n    const newRow = row + rowIndex;\n    const newCol = col + colIndex;\n    if (newRow < 0 || newRow > arr.length - 1 || newCol < 0 || newCol > arr[0].length - 1) return;\n    count += arr[newRow][newCol] ? 1 : 0;\n  });\n  return count;\n};\nconst nextGeneration = arr => {\n  let newArr = arr.map((row, rowIndex) => row.map((col, colIndex) => {\n    const res = searchNeighbors({\n      arr,\n      rowIndex,\n      colIndex\n    });\n    if (col && (res === 2 || res === 3)) {\n      return true;\n    }\n    if (!col && res === 3) {\n      return true;\n    }\n    return false;\n  }));\n  return newArr;\n};\nexport const GameOfLife = () => {\n  _s();\n  const [grid, setGrid] = useState(arrGenerator);\n  const [run, setRun] = useState(false);\n  const toggleCell = useCallback(({\n    rowIndex,\n    colIndex\n  }) => {\n    const newGrid = [...grid];\n    newGrid[rowIndex][colIndex] = !newGrid[rowIndex][colIndex];\n    setGrid(newGrid);\n  }, []);\n  useEffect(() => {\n    if (!run) return;\n    const interval = setInterval(() => {\n      setGrid(prev => nextGeneration(prev));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [run]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid === null || grid === void 0 ? void 0 : grid.map((row, rowIndex) => row === null || row === void 0 ? void 0 : row.map((item, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: item ? {\n          backgroundColor: 'black'\n        } : {\n          backgroundColor: 'white'\n        },\n        onClick: () => toggleCell({\n          rowIndex,\n          colIndex\n        }),\n        className: item ? 'cell cellIsActiv' : 'cell'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"startClick\",\n      onClick: () => setRun(!run),\n      children: run ? 'стоп' : 'старт'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(GameOfLife, \"Uvun/rrPKVmLo4EkHhDUcVY1rHo=\");\n_c = GameOfLife;\nvar _c;\n$RefreshReg$(_c, \"GameOfLife\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","jsxDEV","_jsxDEV","arrGenerator","numRows","numCols","Array","from","length","fill","searchNeighbors","arr","rowIndex","colIndex","count","indNeighbors","forEach","row","col","newRow","newCol","nextGeneration","newArr","map","res","GameOfLife","_s","grid","setGrid","run","setRun","toggleCell","newGrid","interval","setInterval","prev","clearInterval","className","children","item","style","backgroundColor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/smart/Рабочий стол/my_Project/test_task/my-app/src/components/Main.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport '../index.css';\n\nconst arrGenerator = (): arrType => {\n  const numRows = 25;\n  const numCols = 25;\n  return Array.from({ length: numRows }, () => Array(numCols).fill(false));\n};\ntype arrType = Array<Array<boolean>>;\ninterface NeighborsProps {\n  arr: arrType;\n  rowIndex: number;\n  colIndex: number;\n}\n\nconst searchNeighbors = ({ arr, rowIndex, colIndex }: NeighborsProps) => {\n  let count = 0;\n  const indNeighbors = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ];\n  indNeighbors.forEach(([row, col]) => {\n    const newRow = row + rowIndex;\n    const newCol = col + colIndex;\n    if (newRow < 0 || newRow > arr.length - 1 || newCol < 0 || newCol > arr[0].length - 1) return;\n    count += arr[newRow][newCol] ? 1 : 0;\n  });\n  return count;\n};\n\nconst nextGeneration = (arr: arrType) => {\n  let newArr = arr.map((row, rowIndex) =>\n    row.map((col, colIndex) => {\n      const res = searchNeighbors({ arr, rowIndex, colIndex });\n      if (col && (res === 2 || res === 3)) {\n        return true;\n      }\n      if (!col && res === 3) {\n        return true;\n      }\n      return false;\n    }),\n  );\n  return newArr;\n};\n\nexport const GameOfLife = () => {\n  const [grid, setGrid] = useState<arrType>(arrGenerator);\n  const [run, setRun] = useState(false);\n\n  const toggleCell = useCallback(\n    ({ rowIndex, colIndex }: { rowIndex: number; colIndex: number }) => {\n      const newGrid = [...grid];\n      newGrid[rowIndex][colIndex] = !newGrid[rowIndex][colIndex];\n      setGrid(newGrid);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (!run) return;\n    const interval = setInterval(() => {\n      setGrid((prev) => nextGeneration(prev));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [run]);\n\n  return (\n    <div className='container'>\n      <div className='grid'>\n        {grid?.map((row, rowIndex) =>\n          row?.map((item, colIndex) => (\n            <div\n              style={item ? { backgroundColor: 'black' } : { backgroundColor: 'white' }}\n              onClick={() => toggleCell({ rowIndex, colIndex })}\n              className={item ? 'cell cellIsActiv' : 'cell'}\n            ></div>\n          )),\n        )}\n      </div>\n      <div className='startClick' onClick={() => setRun(!run)}>\n        {run ? 'стоп' : 'старт'}\n      </div>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}