{"ast":null,"code":"var _jsxFileName = \"/home/smart/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/my_Project/test_task/my-app/src/components/Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrGenerator = () => {\n  const numRows = 25;\n  const numCols = 25;\n  return Array.from({\n    length: numRows\n  }, () => Array(numCols).fill(false));\n};\nexport const GameOfLife = () => {\n  _s();\n  const [grid, setGrid] = useState(arrGenerator);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: '100vw',\n      height: '100vh',\n      backgroundColor: '#222c34'\n    },\n    children: grid === null || grid === void 0 ? void 0 : grid.map((row, rowIndex) => row === null || row === void 0 ? void 0 : row.map((item, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        border: '1px solid gray'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n// import React, { useState, useEffect } from 'react';\n\n// // Функция для создания нового пустого поля\n// const createEmptyGrid = () => {\n//   const numRows = 25;\n//   const numCols = 25;\n//   return Array.from({ length: numRows }, () => Array(numCols).fill(false));\n// };\n\n// // Функция для подсчета живых соседей\n// const countNeighbors = (grid: Array<number[]>, row: number, col: number) => {\n//   const directions = [\n//     [-1, -1],\n//     [-1, 0],\n//     [-1, 1],\n//     [0, -1],\n//     [0, 1],\n//     [1, -1],\n//     [1, 0],\n//     [1, 1],\n//   ];\n//   const arr = [\n//     [1, 2, 3, 4, 5],\n//     [6, 7, 8, 9, 10],\n//     [11, 12, 13, 14, 15],\n//   ];\n//   const row2 = 1;\n//   const col2 = 3;\n//   console.log(arr[row2][col2], '<<<');\n//   let neighbors = 0;\n//   directions.forEach(([dx, dy]) => {\n//     const newRow = row + dx;\n//     const newCol = col + dy;\n//     if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length) {\n//       neighbors += grid[newRow][newCol] ? 1 : 0;\n//     }\n//   });\n\n//   return neighbors;\n// };\n\n// // Функция для вычисления следующего состояния доски\n// const nextGeneration = (grid: Array<number[]>) => {\n//   const newGrid = grid.map((row, rowIndex) =>\n//     row.map((cell, colIndex) => {\n//       const neighbors = countNeighbors(grid, rowIndex, colIndex);\n//       if (cell && (neighbors === 2 || neighbors === 3)) {\n//         return true;\n//       }\n//       if (!cell && neighbors === 3) {\n//         return true;\n//       }\n//       return false;\n//     }),\n//   );\n//   return newGrid;\n// };\n\n// export const GameOfLife = () => {\n//   const [grid, setGrid] = useState(createEmptyGrid);\n//   const [running, setRunning] = useState(false);\n\n//   // Обновление сетки каждую секунду, если игра запущена\n//   useEffect(() => {\n//     if (!running) return;\n\n//     const interval = setInterval(() => {\n//       setGrid((prevGrid) => nextGeneration(prevGrid));\n//     }, 4000);\n\n//     return () => clearInterval(interval); // Останавливаем обновление при размонтировании компонента\n//   }, [running]);\n\n//   // Функция для изменения состояния клетки при клике\n//   const toggleCell = (row: number, col: number) => {\n//     const newGrid = [...grid];\n//     newGrid[row][col] = !newGrid[row][col];\n//     setGrid(newGrid);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Game of Life</h1>\n//       <div style={{ display: 'grid', gridTemplateColumns: `repeat(${grid[0].length}, 20px)` }}>\n//         {grid.map((row, rowIndex) =>\n//           row.map((cell, colIndex) => (\n//             <div\n//               key={`${rowIndex}-${colIndex}`}\n//               onClick={() => toggleCell(rowIndex, colIndex)}\n//               style={{\n//                 width: 20,\n//                 height: 20,\n//                 backgroundColor: cell ? 'black' : 'white',\n//                 border: '1px solid gray',\n//                 cursor: 'pointer',\n//               }}\n//             />\n//           )),\n//         )}\n//       </div>\n//       <div style={{ marginTop: 20 }}>\n//         <button onClick={() => setRunning(!running)}>{running ? 'Stop' : 'Start'}</button>\n//         <button onClick={() => setGrid(createEmptyGrid())}>Clear</button>\n//         <button onClick={() => setGrid(createEmptyGrid())}>Randomize</button>\n//       </div>\n//     </div>\n//   );\n// };\n_s(GameOfLife, \"i1RqaEQR0kO30PEePd4ZmLLueIE=\");\n_c = GameOfLife;\nvar _c;\n$RefreshReg$(_c, \"GameOfLife\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","arrGenerator","numRows","numCols","Array","from","length","fill","GameOfLife","_s","grid","setGrid","style","display","flexWrap","width","height","backgroundColor","children","map","row","rowIndex","item","colIndex","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/smart/Рабочий стол/my_Project/test_task/my-app/src/components/Main.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst arrGenerator = () => {\n  const numRows = 25;\n  const numCols = 25;\n  return Array.from({ length: numRows }, () => Array(numCols).fill(false));\n};\n\nexport const GameOfLife = () => {\n  const [grid, setGrid] = useState<Array<Array<boolean>>>(arrGenerator);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        width: '100vw',\n        height: '100vh',\n        backgroundColor: '#222c34',\n      }}\n    >\n      {grid?.map((row, rowIndex) =>\n        row?.map((item, colIndex) => (\n          <div style={{ width: '100%', height: '100%', border: '1px solid gray' }}></div>\n        )),\n      )}\n    </div>\n  );\n};\n\n// import React, { useState, useEffect } from 'react';\n\n// // Функция для создания нового пустого поля\n// const createEmptyGrid = () => {\n//   const numRows = 25;\n//   const numCols = 25;\n//   return Array.from({ length: numRows }, () => Array(numCols).fill(false));\n// };\n\n// // Функция для подсчета живых соседей\n// const countNeighbors = (grid: Array<number[]>, row: number, col: number) => {\n//   const directions = [\n//     [-1, -1],\n//     [-1, 0],\n//     [-1, 1],\n//     [0, -1],\n//     [0, 1],\n//     [1, -1],\n//     [1, 0],\n//     [1, 1],\n//   ];\n//   const arr = [\n//     [1, 2, 3, 4, 5],\n//     [6, 7, 8, 9, 10],\n//     [11, 12, 13, 14, 15],\n//   ];\n//   const row2 = 1;\n//   const col2 = 3;\n//   console.log(arr[row2][col2], '<<<');\n//   let neighbors = 0;\n//   directions.forEach(([dx, dy]) => {\n//     const newRow = row + dx;\n//     const newCol = col + dy;\n//     if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length) {\n//       neighbors += grid[newRow][newCol] ? 1 : 0;\n//     }\n//   });\n\n//   return neighbors;\n// };\n\n// // Функция для вычисления следующего состояния доски\n// const nextGeneration = (grid: Array<number[]>) => {\n//   const newGrid = grid.map((row, rowIndex) =>\n//     row.map((cell, colIndex) => {\n//       const neighbors = countNeighbors(grid, rowIndex, colIndex);\n//       if (cell && (neighbors === 2 || neighbors === 3)) {\n//         return true;\n//       }\n//       if (!cell && neighbors === 3) {\n//         return true;\n//       }\n//       return false;\n//     }),\n//   );\n//   return newGrid;\n// };\n\n// export const GameOfLife = () => {\n//   const [grid, setGrid] = useState(createEmptyGrid);\n//   const [running, setRunning] = useState(false);\n\n//   // Обновление сетки каждую секунду, если игра запущена\n//   useEffect(() => {\n//     if (!running) return;\n\n//     const interval = setInterval(() => {\n//       setGrid((prevGrid) => nextGeneration(prevGrid));\n//     }, 4000);\n\n//     return () => clearInterval(interval); // Останавливаем обновление при размонтировании компонента\n//   }, [running]);\n\n//   // Функция для изменения состояния клетки при клике\n//   const toggleCell = (row: number, col: number) => {\n//     const newGrid = [...grid];\n//     newGrid[row][col] = !newGrid[row][col];\n//     setGrid(newGrid);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Game of Life</h1>\n//       <div style={{ display: 'grid', gridTemplateColumns: `repeat(${grid[0].length}, 20px)` }}>\n//         {grid.map((row, rowIndex) =>\n//           row.map((cell, colIndex) => (\n//             <div\n//               key={`${rowIndex}-${colIndex}`}\n//               onClick={() => toggleCell(rowIndex, colIndex)}\n//               style={{\n//                 width: 20,\n//                 height: 20,\n//                 backgroundColor: cell ? 'black' : 'white',\n//                 border: '1px solid gray',\n//                 cursor: 'pointer',\n//               }}\n//             />\n//           )),\n//         )}\n//       </div>\n//       <div style={{ marginTop: 20 }}>\n//         <button onClick={() => setRunning(!running)}>{running ? 'Stop' : 'Start'}</button>\n//         <button onClick={() => setGrid(createEmptyGrid())}>Clear</button>\n//         <button onClick={() => setGrid(createEmptyGrid())}>Randomize</button>\n//       </div>\n//     </div>\n//   );\n// };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,OAAO,GAAG,EAAE;EAClB,OAAOC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEJ;EAAQ,CAAC,EAAE,MAAME,KAAK,CAACD,OAAO,CAAC,CAACI,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1E,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAwBG,YAAY,CAAC;EACrE,oBACED,OAAA;IACEY,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MACfC,QAAQ,EAAE,MAAM;MAChBC,KAAK,EAAE,OAAO;MACdC,MAAM,EAAE,OAAO;MACfC,eAAe,EAAE;IACnB,CAAE;IAAAC,QAAA,EAEDR,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,KACvBD,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAED,GAAG,CAAC,CAACG,IAAI,EAAEC,QAAQ,kBACtBvB,OAAA;MAAKY,KAAK,EAAE;QAAEG,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE,MAAM;QAAEQ,MAAM,EAAE;MAAiB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAC/E,CACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAnB,EAAA,CAhIaD,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}