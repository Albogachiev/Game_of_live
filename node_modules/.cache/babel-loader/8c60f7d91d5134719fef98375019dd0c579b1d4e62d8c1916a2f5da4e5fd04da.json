{"ast":null,"code":"var _jsxFileName = \"/home/smart/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/my_Project/test_task/my-app/src/components/Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrGenerator = () => {\n  const numRows = 25;\n  const numCols = 25;\n  return Array.from({\n    length: numRows\n  }, () => Array(numCols).fill(false));\n};\nexport const GameOfLife = () => {\n  _s();\n  const [grid, setGrid] = useState(arrGenerator);\n  const [run, setRun] = useState(false);\n  const searchNeighbors = ({\n    arr,\n    rowIndex,\n    colIndex\n  }) => {\n    let count = 0;\n    const indNeighbors = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 0], [0, 1], [1, -1], [1, 0], [1, 1]];\n    indNeighbors.forEach(([row, col]) => {\n      const newRow = row + rowIndex;\n      const newCol = col + colIndex;\n      if (newRow < 0 || newRow > arr.length - 1 || newCol < 0 || newCol > arr[0].length - 1) return;\n      count += arr[newRow][newCol] ? 1 : 0;\n    });\n    return count;\n  };\n  const nextGeneration = arr => {\n    arr.map((row, rowIndex) => row.map((col, colIndex) => {\n      let res = searchNeighbors(arr, rowIndex, colIndex);\n      if (col && (res === 2 || res === 3)) {\n        return true;\n      }\n      if (!col && res === 3) {\n        return true;\n      }\n      return false;\n    }));\n  };\n  useEffect(() => {\n    if (!run) return;\n    const interval = setInterval(() => {\n      setGrid(prev => nextGeneration(prev));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [run]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid === null || grid === void 0 ? void 0 : grid.map((row, rowIndex) => row === null || row === void 0 ? void 0 : row.map((item, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: item ? {\n          backgroundColor: 'black'\n        } : {\n          backgroundColor: 'white'\n        },\n        onClick: () => toggleCell(rowIndex, colIndex),\n        className: \"cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setRun(!run),\n      children: run ? 'Stop' : 'Start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n// import React, { useState, useEffect } from 'react';\n\n// // Функция для создания нового пустого поля\n// const createEmptyGrid = () => {\n//   const numRows = 25;\n//   const numCols = 25;\n//   return Array.from({ length: numRows }, () => Array(numCols).fill(false));\n// };\n\n// // Функция для подсчета живых соседей\n// const countNeighbors = (grid: Array<number[]>, row: number, col: number) => {\n//   const directions = [\n// [-1, -1],\n// [-1, 0],\n// [-1, 1],\n// [0, -1],\n// [0, 1],\n// [1, -1],\n// [1, 0],\n// [1, 1],\n//   ];\n//   const arr = [\n//     [1, 2, 3, 4, 5],\n//     [6, 7, 8, 9, 10],\n//     [11, 12, 13, 14, 15],\n//   ];\n//   const row2 = 1;\n//   const col2 = 3;\n//   console.log(arr[row2][col2], '<<<');\n//   let neighbors = 0;\n//   directions.forEach(([dx, dy]) => {\n//     const newRow = row + dx;\n//     const newCol = col + dy;\n//     if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length) {\n//       neighbors += grid[newRow][newCol] ? 1 : 0;\n//     }\n//   });\n\n//   return neighbors;\n// };\n\n// // Функция для вычисления следующего состояния доски\n// const nextGeneration = (grid: Array<number[]>) => {\n//   const newGrid = grid.map((row, rowIndex) =>\n// row.map((cell, colIndex) => {\n//   const neighbors = countNeighbors(grid, rowIndex, colIndex);\n//   if (cell && (neighbors === 2 || neighbors === 3)) {\n//     return true;\n//   }\n//   if (!cell && neighbors === 3) {\n//     return true;\n//   }\n//   return false;\n// }),\n//   );\n//   return newGrid;\n// };\n\n// export const GameOfLife = () => {\n//   const [grid, setGrid] = useState(createEmptyGrid);\n//   const [running, setRunning] = useState(false);\n\n//   // Обновление сетки каждую секунду, если игра запущена\n//   useEffect(() => {\n//     if (!running) return;\n\n//     const interval = setInterval(() => {\n//       setGrid((prevGrid) => nextGeneration(prevGrid));\n//     }, 4000);\n\n//     return () => clearInterval(interval); // Останавливаем обновление при размонтировании компонента\n//   }, [running]);\n\n//   // Функция для изменения состояния клетки при клике\n//   const toggleCell = (row: number, col: number) => {\n//     const newGrid = [...grid];\n//     newGrid[row][col] = !newGrid[row][col];\n//     setGrid(newGrid);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Game of Life</h1>\n//       <div style={{ display: 'grid', gridTemplateColumns: `repeat(${grid[0].length}, 20px)` }}>\n//         {grid.map((row, rowIndex) =>\n//           row.map((cell, colIndex) => (\n//             <div\n//               key={`${rowIndex}-${colIndex}`}\n//               onClick={() => toggleCell(rowIndex, colIndex)}\n//               style={{\n//                 width: 20,\n//                 height: 20,\n//                 backgroundColor: cell ? 'black' : 'white',\n//                 border: '1px solid gray',\n//                 cursor: 'pointer',\n//               }}\n//             />\n//           )),\n//         )}\n//       </div>\n//       <div style={{ marginTop: 20 }}>\n//         <button onClick={() => setRunning(!running)}>{running ? 'Stop' : 'Start'}</button>\n//         <button onClick={() => setGrid(createEmptyGrid())}>Clear</button>\n//         <button onClick={() => setGrid(createEmptyGrid())}>Randomize</button>\n//       </div>\n//     </div>\n//   );\n// };\n_s(GameOfLife, \"bKOO9k2y4wPuvdRN2sTLqRx/s60=\");\n_c = GameOfLife;\nvar _c;\n$RefreshReg$(_c, \"GameOfLife\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","arrGenerator","numRows","numCols","Array","from","length","fill","GameOfLife","_s","grid","setGrid","run","setRun","searchNeighbors","arr","rowIndex","colIndex","count","indNeighbors","forEach","row","col","newRow","newCol","nextGeneration","map","res","interval","setInterval","prev","clearInterval","className","children","item","style","backgroundColor","onClick","toggleCell","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/smart/Рабочий стол/my_Project/test_task/my-app/src/components/Main.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nconst arrGenerator = () => {\n  const numRows = 25;\n  const numCols = 25;\n  return Array.from({ length: numRows }, () => Array(numCols).fill(false));\n};\n\ninterface NeighborsProps {\n  arr: Array<Array<boolean>>;\n  rowIndex: number;\n  colIndex: number;\n}\n\nexport const GameOfLife = () => {\n  const [grid, setGrid] = useState<Array<Array<boolean>>>(arrGenerator);\n  const [run, setRun] = useState(false);\n\n  const searchNeighbors = ({ arr, rowIndex, colIndex }: NeighborsProps) => {\n    let count = 0;\n    const indNeighbors = [\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, -1],\n      [0, 0],\n      [0, 1],\n      [1, -1],\n      [1, 0],\n      [1, 1],\n    ];\n    indNeighbors.forEach(([row, col]) => {\n      const newRow = row + rowIndex;\n      const newCol = col + colIndex;\n      if (newRow < 0 || newRow > arr.length - 1 || newCol < 0 || newCol > arr[0].length - 1) return;\n      count += arr[newRow][newCol] ? 1 : 0;\n    });\n    return count;\n  };\n\n  const nextGeneration = (arr) => {\n    arr.map((row, rowIndex) =>\n      row.map((col, colIndex) => {\n        let res = searchNeighbors(arr, rowIndex, colIndex);\n        if (col && (res === 2 || res === 3)) {\n          return true;\n        }\n        if (!col && res === 3) {\n          return true;\n        }\n        return false;\n      }),\n    );\n  };\n\n  useEffect(() => {\n    if (!run) return;\n    const interval = setInterval(() => {\n      setGrid((prev) => nextGeneration(prev));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [run]);\n  return (\n    <div className='container'>\n      <div className='grid'>\n        {grid?.map((row, rowIndex) =>\n          row?.map((item, colIndex) => (\n            <div\n              style={item ? { backgroundColor: 'black' } : { backgroundColor: 'white' }}\n              onClick={() => toggleCell(rowIndex, colIndex)}\n              className='cell'\n            ></div>\n          )),\n        )}\n      </div>\n      <button onClick={() => setRun(!run)}>{run ? 'Stop' : 'Start'}</button>\n    </div>\n  );\n};\n\n// import React, { useState, useEffect } from 'react';\n\n// // Функция для создания нового пустого поля\n// const createEmptyGrid = () => {\n//   const numRows = 25;\n//   const numCols = 25;\n//   return Array.from({ length: numRows }, () => Array(numCols).fill(false));\n// };\n\n// // Функция для подсчета живых соседей\n// const countNeighbors = (grid: Array<number[]>, row: number, col: number) => {\n//   const directions = [\n// [-1, -1],\n// [-1, 0],\n// [-1, 1],\n// [0, -1],\n// [0, 1],\n// [1, -1],\n// [1, 0],\n// [1, 1],\n//   ];\n//   const arr = [\n//     [1, 2, 3, 4, 5],\n//     [6, 7, 8, 9, 10],\n//     [11, 12, 13, 14, 15],\n//   ];\n//   const row2 = 1;\n//   const col2 = 3;\n//   console.log(arr[row2][col2], '<<<');\n//   let neighbors = 0;\n//   directions.forEach(([dx, dy]) => {\n//     const newRow = row + dx;\n//     const newCol = col + dy;\n//     if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length) {\n//       neighbors += grid[newRow][newCol] ? 1 : 0;\n//     }\n//   });\n\n//   return neighbors;\n// };\n\n// // Функция для вычисления следующего состояния доски\n// const nextGeneration = (grid: Array<number[]>) => {\n//   const newGrid = grid.map((row, rowIndex) =>\n// row.map((cell, colIndex) => {\n//   const neighbors = countNeighbors(grid, rowIndex, colIndex);\n//   if (cell && (neighbors === 2 || neighbors === 3)) {\n//     return true;\n//   }\n//   if (!cell && neighbors === 3) {\n//     return true;\n//   }\n//   return false;\n// }),\n//   );\n//   return newGrid;\n// };\n\n// export const GameOfLife = () => {\n//   const [grid, setGrid] = useState(createEmptyGrid);\n//   const [running, setRunning] = useState(false);\n\n//   // Обновление сетки каждую секунду, если игра запущена\n//   useEffect(() => {\n//     if (!running) return;\n\n//     const interval = setInterval(() => {\n//       setGrid((prevGrid) => nextGeneration(prevGrid));\n//     }, 4000);\n\n//     return () => clearInterval(interval); // Останавливаем обновление при размонтировании компонента\n//   }, [running]);\n\n//   // Функция для изменения состояния клетки при клике\n//   const toggleCell = (row: number, col: number) => {\n//     const newGrid = [...grid];\n//     newGrid[row][col] = !newGrid[row][col];\n//     setGrid(newGrid);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Game of Life</h1>\n//       <div style={{ display: 'grid', gridTemplateColumns: `repeat(${grid[0].length}, 20px)` }}>\n//         {grid.map((row, rowIndex) =>\n//           row.map((cell, colIndex) => (\n//             <div\n//               key={`${rowIndex}-${colIndex}`}\n//               onClick={() => toggleCell(rowIndex, colIndex)}\n//               style={{\n//                 width: 20,\n//                 height: 20,\n//                 backgroundColor: cell ? 'black' : 'white',\n//                 border: '1px solid gray',\n//                 cursor: 'pointer',\n//               }}\n//             />\n//           )),\n//         )}\n//       </div>\n//       <div style={{ marginTop: 20 }}>\n//         <button onClick={() => setRunning(!running)}>{running ? 'Stop' : 'Start'}</button>\n//         <button onClick={() => setGrid(createEmptyGrid())}>Clear</button>\n//         <button onClick={() => setGrid(createEmptyGrid())}>Randomize</button>\n//       </div>\n//     </div>\n//   );\n// };\n"],"mappings":"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AS,EAAC;MAAM;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CACP,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACN1C,OAAA;MAAQqC,OAAO,EAAEA,CAAA,KAAMxB,MAAM,CAAC,CAACD,GAAG,CAAE;MAAAqB,QAAA,EAAErB,GAAG,GAAG,MAAM,GAAG;IAAO;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAjC,EAAA,CA7KaD,UAAU;AAAAmC,EAAA,GAAVnC,UAAU;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}